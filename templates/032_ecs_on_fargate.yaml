AWSTemplateFormatVersion: '2010-09-09'
Description: Example of ALB and AWS Fargate integration with CloudFormation

Resources:
  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  # Public Subnet
  MyPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']

  # Internet Gateway
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway

  MyVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  # Route Table and Route
  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  MyRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  MyRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet
      RouteTableId: !Ref MyRouteTable

  # ALB
  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyALB
      Scheme: internet-facing
      Subnets:
        - !Ref MyPublicSubnet
      SecurityGroups:
        - !Ref MyALBSecurityGroup

  # ALB Security Group
  MyALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to ALB
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Fargate Cluster
  MyCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: MyFargateCluster

  # Task Definition
  MyTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: MyTaskDefinition
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: my-container
          Image: nginx:latest
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp

  # Fargate Service
  MyFargateService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref MyCluster
      TaskDefinition: !Ref MyTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref MyPublicSubnet
          SecurityGroups:
            - !Ref MyFargateSecurityGroup
      LoadBalancers:
        - TargetGroupArn: !Ref MyTargetGroup
          ContainerName: my-container
          ContainerPort: 80

  # Fargate Security Group
  MyFargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from ALB to Fargate
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref MyALBSecurityGroup

  # Target Group
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      Protocol: HTTP
      Port: 80
      VpcId: !Ref MyVPC
      TargetType: ip

  # ALB Listener
  MyALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyALB
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup

  # Route 53 Hosted Zone
  MyHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: example.com

  # Route 53 Record Set
  MyRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref MyHostedZone
      Name: www.example.com
      Type: A
      AliasTarget:
        DNSName: !GetAtt MyALB.DNSName
        HostedZoneId: !GetAtt MyALB.CanonicalHostedZoneId
