AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFront with ALB, EC2, ACM Certificate, Global Accelerator, and Route 53 Domain Resolution"

Resources:
  # ACM Certificate
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: "example.com"
      ValidationMethod: DNS

  # Security Group for ALB
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for ALB"
      VpcId: vpc-12345678  # Replace with your VPC ID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # Application Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "MyALB"
      Subnets:
        - subnet-12345678  # Replace with your Subnet IDs
        - subnet-87654321
      SecurityGroups:
        - !Ref ALBSecurityGroup

  # Target Group for EC2 Instances
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "MyTargetGroup"
      Port: 80
      Protocol: HTTP
      VpcId: vpc-12345678  # Replace with your VPC ID
      TargetType: instance

  # Listener for ALB
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-12345678  # Replace with your AMI ID
      SubnetId: subnet-12345678  # Replace with your Subnet ID
      SecurityGroupIds:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: "MyEC2Instance"

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt LoadBalancer.DNSName
            Id: ALBOrigin
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: ALBOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          SslSupportMethod: sni-only

  # Global Accelerator
  GlobalAccelerator:
    Type: AWS::GlobalAccelerator::Accelerator
    Properties:
      Name: "MyGlobalAccelerator"
      Enabled: true
      IpAddressType: IPV4

  AcceleratorListener:
    Type: AWS::GlobalAccelerator::Listener
    Properties:
      AcceleratorArn: !Ref GlobalAccelerator
      PortRanges:
        - FromPort: 443
          ToPort: 443
      Protocol: TCP
      ClientAffinity: NONE

  EndpointGroup:
    Type: AWS::GlobalAccelerator::EndpointGroup
    Properties:
      ListenerArn: !Ref AcceleratorListener
      EndpointConfigurations:
        - EndpointId: !Ref CloudFrontDistribution
          Weight: 100
      Region: us-east-1

  # Route 53 Hosted Zone
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: "example.com"

  # Route 53 Record Set for Global Accelerator
  Route53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: "example.com"
      Type: A
      AliasTarget:
        DNSName: !GetAtt GlobalAccelerator.DnsName
        HostedZoneId: Z2BJ6XQ5FK7UCB  # Global Accelerator HostedZone ID
