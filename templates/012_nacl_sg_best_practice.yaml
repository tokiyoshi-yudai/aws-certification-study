AWSTemplateFormatVersion: "2010-09-09"
Description: "Sample template demonstrating the best practices for using NACL and SG."

Resources:
  # VPC
  MyVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "MyVpc"

  # Subnets
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "PublicSubnet"

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: "PrivateSubnet"

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVpc
      InternetGatewayId: !Ref InternetGateway

  # Route Table for Public Subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  AssociatePublicSubnet:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # NACL
  PublicNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MyVpc

  PrivateNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MyVpc

  # NACL Entries for Public Subnet
  AllowHTTPAndHTTPSIn:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 80
        To: 443

  AllowHTTPAndHTTPSOut:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 101
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: true
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 80
        To: 443

  AllowEphemeralInbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 102
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 1024
        To: 65535

  AllowEphemeralOutbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 103
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: true
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 1024
        To: 65535

  DenyMaliciousIP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 110
      Protocol: -1
      RuleAction: deny
      Egress: false
      CidrBlock: "203.0.113.0/24" # Example malicious IP

  # NACL Entries for Private Subnet
  AllowMySQLInbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 200
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: "10.0.1.0/24"
      PortRange:
        From: 3306
        To: 3306

  AllowMySQLOutbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 201
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: true
      CidrBlock: "10.0.1.0/24"
      PortRange:
        From: 3306
        To: 3306

  AllowEphemeralInboundPrivate:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 202
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 1024
        To: 65535

  AllowEphemeralOutboundPrivate:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 203
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: true
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 1024
        To: 65535

  # Associate NACLs with Subnets
  AssociatePublicNACL:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      NetworkAclId: !Ref PublicNACL

  AssociatePrivateNACL:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      NetworkAclId: !Ref PrivateNACL

  # Security Groups
  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP, HTTPS, and SSH from admin"
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0" # Allow HTTP from anywhere
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0" # Allow HTTPS from anywhere
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "198.51.100.0/24" # Admin IP for SSH

  DatabaseSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow MySQL from WebServerSubnet"
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSG # Allow from Web Server SG
